generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  name          String
  role          Role      @default(BUYER)
  phone         String?
  address       String?
  bio          String?   @db.Text
  photoUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Producer specific fields
  companyName   String?
  taxId         String?

  // Buyer specific fields
  deliveryAddress String?
  preferredPayment String?

  // Relations
  products      Product[]
  orders        Order[]
  messages      Message[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String    @db.Text
  price       Float
  quantity    Int
  unit        String    // e.g., "kg", "piece", etc.
  imageUrl    String?
  category    String
  status      ProductStatus @default(AVAILABLE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  producer    User      @relation(fields: [producerId], references: [id])
  producerId  String
  orders      OrderItem[]
}

model Order {
  id          String    @id @default(uuid())
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  buyer       User      @relation(fields: [buyerId], references: [id])
  buyerId     String
  items       OrderItem[]
}

model OrderItem {
  id          String    @id @default(uuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
}

model Message {
  id          String    @id @default(uuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())

  // Relations
  sender      User      @relation(fields: [senderId], references: [id])
  senderId    String
}

enum Role {
  ADMIN
  PRODUCER
  BUYER
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
